# -*- coding: utf-8 -*-
"""3rd_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PfqfgCd57rtd04pcgRjRS6xj2wp-rlki

**Clustering MNIST & CIFAR-10 Datasets**

Import Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow import keras
from keras import datasets
from sklearn.model_selection import train_test_split
import sklearn.preprocessing as skp
from sklearn.decomposition import PCA, KernelPCA
from sklearn.manifold import TSNE, Isomap
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.cluster import SpectralClustering
from sklearn.metrics import adjusted_rand_score, normalized_mutual_info_score, accuracy_score
from sklearn.metrics import classification_report

"""Isomap Dimensionality Reduction Function"""

# Applying isomap to reduce dimentions of train and test set

def dimentionality_reduction_train(X, n_components=2, **kwargs): # όπου Χ τα δεδομένα του train set

  print(f"Applying Isomap with {n_components} dimensions...")
  reducer = Isomap(n_components=n_components, **kwargs)
  X_reduced = reducer.fit_transform(X)

  print(f"Isomap Done! Shape: {X_reduced.shape}")

  return X_reduced, reducer


def dimentionality_reduction_test(X, reducer): # όπου Χ τα δεδομένα του test set
    X_reduced = reducer.transform(X)

    print(f"Isomap Done! Shape: {X_reduced.shape}")

    return X_reduced, reducer

"""Spectral Clustering Function (from sklearn)"""

def spectral_clustering(X, n_clusters, n_neighbors): # X: τα μειωμένα σε  διάσταση δεδομ'ενα, n_clusters: ο αριθμός ομάδων που θέλουμε να βρούμε, n_neighbors=200: ο αριθμός των κοντινότερων γειτόνων που χρησιμοποιούμε γι να υπολογίσουμε την ομοιότητα μεταξύ των δειγμάτων.

  affinity = 'nearest_neighbors'
  assign_labels = 'kmeans'

  print(f"Applying Spectral Clustering with n_neighbors={n_neighbors}, and {n_clusters} clusters...")

  clusetring = SpectralClustering(n_clusters=n_clusters,
                                  affinity=affinity, # ομοιότητα κοντινών γετόνων
                                  n_neighbors=n_neighbors, # αριθμός των κοντινών γειτόνων
                                  assign_labels=assign_labels, # κατηγοριοποίηση των δεδομένων στα clusters μέσω του αλγορίθμου kmeans
                                  eigen_solver='arpack', # για μεγαλα δεδομένα & μικρότερο υπολογσιστικό χρόνο
                                  random_state=0)

  cluster_labels = clusetring.fit_predict(X) # εκπαιδεύει τον αλγόριθμο & επιστρέφει τα lables που δηλώνουν σε ποιο cluster ανήκει κάθε δείγμα.

  return cluster_labels # τα labels που δηλώνουν σε ποιο cluster ανήκει το κάθε δείγμα.

"""Visualization of Clusters Function"""

def plot_side_by_side(X, true_labels, true_title, cluster_labels, clustered_title):
    fig, axes = plt.subplots(1, 2, figsize=(20, 10))

    # True labels plot
    scatter_true = axes[0].scatter(X[:, 0], X[:, 1], c=true_labels, cmap='viridis', s=10)
    axes[0].set_title(true_title)
    axes[0].set_xlabel('Dimension 1')
    axes[0].set_ylabel('Dimension 2')
    fig.colorbar(scatter_true, ax=axes[0])

    # Clustering results plot
    scatter_clustered = axes[1].scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='viridis', s=10)
    axes[1].set_title(clustered_title)
    axes[1].set_xlabel('Dimension 1')
    axes[1].set_ylabel('Dimension 2')
    fig.colorbar(scatter_clustered, ax=axes[1])

    plt.tight_layout()
    plt.show()

"""Hyper Parameter Tuning"""

def Tuning_clustering_2(X, true_labels, n_clusters, n_neighbors_values):
  best_ari = -1
  best_nmi = 0
  best_score = -1
  results = []

  for n_neighbors in n_neighbors_values:

      print(f"Testing: n_neighbors={n_neighbors}")

      # Εκτέλεση του spectra clustering
      cluster_labels = spectral_clustering(X, n_clusters=n_clusters, n_neighbors=n_neighbors)

      # Υπολογισμός μετρικών
      ari_score = adjusted_rand_score(true_labels, cluster_labels)
      nmi_score = normalized_mutual_info_score(true_labels, cluster_labels)

      results.append({
          'n_neighbors': n_neighbors,
          'ARI': ari_score,
          'NMI': nmi_score
        })

      if ari_score > best_score:
              best_score = ari_score
              best_params = {
                  'n_neighbors': n_neighbors
                    }

  print("\nBest Parameters Found:")
  print(best_params)
  print("\nAll Results:")
  for result in results:
      print(result)

  return best_params, results

"""Use Silhouette Metric"""

def Tuning_clustering(X, n_clusters, n_neighbors_values):
    best_score = -1
    results = []

    for n_neighbors in n_neighbors_values:

        print(f"Testing: n_neighbors={n_neighbors}")

        # Εκτέλεση του spectral clustering
        cluster_labels = spectral_clustering(X, n_clusters=n_clusters, n_neighbors=n_neighbors)

        # Υπολογισμός silhouette score
        silhouette = silhouette_score(X, cluster_labels)

        results.append({
            'n_neighbors': n_neighbors,
            'Silhouette Score': silhouette
        })

        if silhouette > best_score:
            best_score = silhouette
            best_params = {
                'n_neighbors': n_neighbors
            }

    print("\nBest Parameters Found:")
    print(best_params)
    print("\nAll Results:")
    for result in results:
        print(result)

    return best_params, results

"""Top three samples in every cluster"""

def find_top_labels(X, cluster_labels, true_labels, top_n=3):
    # Εξάγουμε τα unique labels
    unique_labels = np.unique(cluster_labels)
    # πίνακας στον οποίο θα κρατήοσυμε τα αποτελέσματα των τοπ 3 labels
    top_labels_summary = []

    for label in unique_labels:
        # Βρίσκουμε τις θέσεις των δειγμάτων που ανοίκουν στο ίδιο cluster
        cluster_indices = np.where(cluster_labels == label)[0]
        # Εξάγουμε τις πραγματικές ετικέτες των δεδομένων που ανήκουν στις συγκεκριμένες θέσεις (χρησιμοποιώντας τους δείκτες cluster indices)
        cluster_true_labels = true_labels[cluster_indices]

        # Μετράμε πόσες φορές εμφανίζεται κάθε τιμή σε έναν πίνακα
        label_counts = np.bincount(cluster_true_labels, minlength=np.max(true_labels) + 1)
        top_labels = np.argsort(label_counts)[-top_n:][::-1]
        top_percentages = label_counts[top_labels] / cluster_indices.size

        for top_label, percentage in zip(top_labels, top_percentages):
            top_labels_summary.append({
                'Cluster': label,
                'Top Label': top_label,
                'Percentage': percentage
            })

    return pd.DataFrame(top_labels_summary)

"""Classify Test Data Based on Cluster Centroids"""

def classify_with_clusters(X_train, cluster_labels, X_test, y_test): # X_train: δεδομένα εκπαίδευσης, labels_train: οι ετικέτες από το clustering (που αντιστοιχούν σε κάθε δείγμα στο X_train), X_test: τα δεοδμένα που θέλουμε να ταξινομήσουμε.
    unique_labels = np.unique(cluster_labels) # παίρνει τα μοναδικά labels από τα labels που αντιστοιχούν σε κάθε cluster
    centroids = []

    for label in unique_labels:
        group_points = X_train[cluster_labels == label] # για κάθε label (cluster) επιλέγουμε τα δείγματα από το X_train που ανήκουν σε αυτό το label. Εξάγουμε τα δείγματα που ανήκουν σε ένα συγκεκριμένο cluster.
        if len(group_points) > 0:
            centroids.append(group_points.mean(axis=0)) # υπολογίζουμε το κέντρο του cluster & τα κεντροειδή τα προσθέτουμε στον πίνακα centroids.

    centroids = np.array(centroids) # μετατροπή τη λίστα των centroids σε numpy array για να τη χρησιμοποιήσουμε στον ταξινομητή.

    labels_test = []

    for test_point in X_test:
        distances = np.linalg.norm(centroids - test_point, axis=1)
        nearest_centroid = np.argmin(distances)
        labels_test.append(nearest_centroid)


    labels_test = np.array(labels_test)


    # Calculate accuracy
    accuracy = accuracy_score(y_test, labels_test)
    print(f"Classification Accuracy: {accuracy:.2f}")

    print("Classification Report:")
    print(classification_report(y_test, labels_test))

    # Confusion Matrix
    from sklearn.metrics import ConfusionMatrixDisplay
    ConfusionMatrixDisplay.from_predictions(y_test, labels_test, cmap="viridis")
    plt.title("Confusion Matrix")
    plt.show()


    return labels_test

def main_2():

  # Load MNIST dataset
  mnist = datasets.mnist
  (X_train_mnist, y_train_mnist), (X_test_mnist, y_test_mnist) = mnist.load_data()

  # Load Cifar10 dataset
  cifar10 = datasets.cifar10
  (X_train_cifar10, y_train_cifar10), (X_test_cifar10, y_test_cifar10) = cifar10.load_data()

  # convert data to numpy arrays
  X_train_mnist = np.array(X_train_mnist)
  y_train_mnist = np.array(y_train_mnist)

  X_train_cifar10 = np.array(X_train_cifar10)
  y_train_cifar10 = np.array(y_train_cifar10)


  # Normalization
  X_train_mnist = X_train_mnist / 255.0
  X_test_mnist = X_test_mnist / 255.0

  X_train_cifar10 = X_train_cifar10 / 255.0
  X_test_cifar10 = X_test_cifar10 / 255.0

  # Reshape of data
  X_train_mnist = X_train_mnist.reshape(X_train_mnist.shape[0], -1)
  X_test_mnist = X_test_mnist.reshape(X_test_mnist.shape[0], -1)

  X_train_cifar10 = X_train_cifar10.reshape(X_train_cifar10.shape[0], -1)
  X_test_cifar10 = X_test_cifar10.reshape(X_test_cifar10.shape[0], -1)

  y_train_mnist = y_train_mnist.flatten()
  y_test_mnist = y_test_mnist.flatten()

  y_train_cifar10 = y_train_cifar10.flatten()
  y_test_cifar10 = y_test_cifar10.flatten()

  # Standardization
  scaler = skp.StandardScaler()
  X_train_mnist = scaler.fit_transform(X_train_mnist)
  X_test_mnist = scaler.transform(X_test_mnist)

  X_train_cifar10 = scaler.fit_transform(X_train_cifar10)
  X_test_cifar10 = scaler.transform(X_test_cifar10)

  # Use the first 10000 sampes
  X_train_mnist = X_train_mnist[:25000]
  y_train_mnist = y_train_mnist[:25000]
  print("Classes in subset:", np.unique(y_train_mnist))

  X_train_cifar10 = X_train_cifar10[:25000]
  y_train_cifar10 = y_train_cifar10[:25000]
  print("Classes in subset:", np.unique(y_train_cifar10))

  # Dimentionality Reduction train set
  X_train_mnist_reduced, mnist_reducer= dimentionality_reduction_train(X_train_mnist, n_components=2)
  X_train_cifar10_reduced, cifar10_reducer = dimentionality_reduction_train(X_train_cifar10, n_components=2)

  # Dimentionality Reduction test set
  X_test_mnist_reduced, _ = dimentionality_reduction_test(X_test_mnist, mnist_reducer)
  X_test_cifar10_reduced, _ = dimentionality_reduction_test(X_test_cifar10, cifar10_reducer)


  # Αρχικές παράμετροι για την εύρεση καλύτερων παραμετρων
  n_clusters = 5  # Δοκιμάζουμε με 10 clusters
  affinity_methods = ['nearest_neighbors']  # Μέθοδος nearest_neighbors για affinity
  n_neighbors_values = [25, 50, 100, 150, 200]  # Πλήθος γειτόνων 150
  assign_labels_options = ['kmeans']


  # Εκτέλεση της grid search για το Mnist
  best_params_mnist, all_results_mnist = Tuning_clustering(
      X_train_mnist_reduced, y_train_mnist, n_clusters,
      n_neighbors_values
  )

  print(f"Best Parameters: {best_params_mnist}")

  # Εκτέλεση της grid search για το Mnist
  best_params_cifar10, all_results_cifar10 = Tuning_clustering(
      X_train_cifar10_reduced, y_train_cifar10, n_clusters,
      n_neighbors_values
  )

  print(f"Best Parameters: {best_params_cifar10}")


  # Εκτέλεση του clustering με τις καλύτερες παραμέτρους για το MNIST dataset
  mnist_cluster_labels = spectral_clustering(
      X_train_mnist_reduced,
      n_clusters=n_clusters,
      n_neighbors=best_params_mnist['n_neighbors']
  )

  # Εκτέλεση του clustering με τις καλύτερες παραμέτρους για το CIFAR-10 dataset
  cifar10_cluster_labels = spectral_clustering(
      X_train_cifar10_reduced,
      n_clusters=n_clusters,
      n_neighbors=best_params_cifar10['n_neighbors'],
  )


  # Mnist Dataset
  plot_side_by_side(
      X_train_mnist_reduced, y_train_mnist, "True Labels for MNIST",
      mnist_cluster_labels,
      f"Best Clustering for MNIST (n_neighbors={best_params_mnist['n_neighbors']})"
    )

  # Cifar 10 Dataset
  plot_side_by_side(
      X_train_cifar10_reduced, y_train_cifar10, "True Labels for CIFAR-10",
      cifar10_cluster_labels,
      f"Best Clustering for CIFAR-10 (n_neighbors={best_params_cifar10['n_neighbors']})"
    )

  # Find top 3 labels per cluster
  top_labels_mnist = find_top_labels(X_train_mnist_reduced, mnist_cluster_labels, y_train_mnist)
  print("Top labels for each cluster in MNIST:")
  print(top_labels_mnist)

  top_labels_cifar10 = find_top_labels(X_train_cifar10_reduced, cifar10_cluster_labels, y_train_cifar10)
  print("Top labels for each cluster in CIFAR-10:")
  print(top_labels_cifar10)

  # Classify Test Data
  print("Classifying Test Data...MNIST")
  mnist_predicted_labels = classify_with_clusters(X_train_mnist_reduced, mnist_cluster_labels, X_test_mnist_reduced, y_test_mnist)
  print("Classifying Test Data...CIFAR-10")
  cifar10_predicted_labels = classify_with_clusters(X_train_cifar10_reduced, cifar10_cluster_labels, X_test_cifar10_reduced, y_test_cifar10)

def main():
    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from tensorflow import keras
    from sklearn.model_selection import train_test_split
    import sklearn.preprocessing as skp

    # Load MNIST dataset
    mnist = keras.datasets.mnist
    (X_train_mnist, y_train_mnist), (X_test_mnist, y_test_mnist) = mnist.load_data()

    # Load CIFAR-10 dataset
    cifar10 = keras.datasets.cifar10
    (X_train_cifar10, y_train_cifar10), (X_test_cifar10, y_test_cifar10) = cifar10.load_data()

    # Normalize data
    X_train_mnist = X_train_mnist / 255.0
    X_test_mnist = X_test_mnist / 255.0
    X_train_cifar10 = X_train_cifar10 / 255.0
    X_test_cifar10 = X_test_cifar10 / 255.0

    # Reshape data
    X_train_mnist = X_train_mnist.reshape(X_train_mnist.shape[0], -1)
    X_test_mnist = X_test_mnist.reshape(X_test_mnist.shape[0], -1)
    X_train_cifar10 = X_train_cifar10.reshape(X_train_cifar10.shape[0], -1)
    X_test_cifar10 = X_test_cifar10.reshape(X_test_cifar10.shape[0], -1)

    # Flatten labels
    y_train_mnist = y_train_mnist.flatten()
    y_test_mnist = y_test_mnist.flatten()
    y_train_cifar10 = y_train_cifar10.flatten()
    y_test_cifar10 = y_test_cifar10.flatten()

    # Standardize data
    scaler = skp.StandardScaler()
    X_train_mnist = scaler.fit_transform(X_train_mnist)
    X_test_mnist = scaler.transform(X_test_mnist)
    X_train_cifar10 = scaler.fit_transform(X_train_cifar10)
    X_test_cifar10 = scaler.transform(X_test_cifar10)

    # Dimentionality Reduction train set
    X_train_mnist_reduced, mnist_reducer= dimentionality_reduction_train(X_train_mnist, n_components=2)
    X_train_cifar10_reduced, cifar10_reducer = dimentionality_reduction_train(X_train_cifar10, n_components=2)

    # Dimentionality Reduction test set
    X_test_mnist_reduced, _ = dimentionality_reduction_test(X_test_mnist, mnist_reducer)
    X_test_cifar10_reduced, _ = dimentionality_reduction_test(X_test_cifar10, cifar10_reducer)

    # Αρχικές παράμετροι για την εύρεση καλύτερων παραμετρων
    n_clusters = 5  # Δοκιμάζουμε με 10 clusters
    affinity_methods = ['nearest_neighbors']  # Μέθοδος nearest_neighbors για affinity
    n_neighbors_values = [25, 50, 100, 150, 200]  # Πλήθος γειτόνων
    assign_labels_options = ['kmeans']


    # Tuning for MNIST
    print("\nTuning MNIST dataset...")
    best_params_mnist, results_mnist = Tuning_clustering(X_train_mnist_reduced, n_clusters, n_neighbors_values)

    # Tuning for CIFAR-10
    print("\nTuning CIFAR-10 dataset...")
    best_params_cifar10, results_cifar10 = Tuning_clustering(X_train_cifar10_reduced, n_clusters, n_neighbors_values)

    # Display results
    print("\nBest parameters for MNIST:", best_params_mnist)
    print("Best parameters for CIFAR-10:", best_params_cifar10)

    # Plot results
    def plot_results(results, dataset_name):
        results_df = pd.DataFrame(results)
        plt.figure(figsize=(10, 6))
        plt.plot(results_df['n_neighbors'], results_df['Silhouette Score'], marker='o', label=f"{dataset_name} Silhouette Score")
        plt.xlabel("Number of Neighbors")
        plt.ylabel("Silhouette Score")
        plt.title(f"Silhouette Scores for {dataset_name}")
        plt.legend()
        plt.grid()
        plt.show()

    plot_results(results_mnist, "MNIST")
    plot_results(results_cifar10, "CIFAR-10")

    # Εκτέλεση του clustering με τις καλύτερες παραμέτρους για το MNIST dataset
    mnist_cluster_labels = spectral_clustering(
      X_train_mnist_reduced,
      n_clusters=n_clusters,
      n_neighbors=best_params_mnist['n_neighbors']
  )

    # Εκτέλεση του clustering με τις καλύτερες παραμέτρους για το CIFAR-10 dataset
    cifar10_cluster_labels = spectral_clustering(
      X_train_cifar10_reduced,
      n_clusters=n_clusters,
      n_neighbors=best_params_cifar10['n_neighbors'],
  )


    print("\nVisualizing MNIST clustering...")
    plot_side_by_side(X_train_mnist_reduced, y_train_mnist, "True Labels for MNIST",
                      spectral_clustering(X_train_mnist_reduced, n_clusters, best_params_mnist['n_neighbors']),
                      f"Clusters for MNIST (n_neighbors={best_params_mnist['n_neighbors']})")

    print("\nVisualizing CIFAR-10 clustering...")
    plot_side_by_side(X_train_cifar10_reduced, y_train_cifar10, "True Labels for CIFAR-10",
                      spectral_clustering(X_train_cifar10_reduced, n_clusters, best_params_cifar10['n_neighbors']),
                      f"Clusters for CIFAR-10 (n_neighbors={best_params_cifar10['n_neighbors']})")


    # Find top 3 labels per cluster
    top_labels_mnist = find_top_labels(X_train_mnist_reduced, mnist_cluster_labels, y_train_mnist)
    print("Top labels for each cluster in MNIST:")
    print(top_labels_mnist)

    top_labels_cifar10 = find_top_labels(X_train_cifar10_reduced, cifar10_cluster_labels, y_train_cifar10)
    print("Top labels for each cluster in CIFAR-10:")
    print(top_labels_cifar10)

    # Classify Test Data
    print("Classifying Test Data...MNIST")
    mnist_predicted_labels = classify_with_clusters(X_train_mnist_reduced, mnist_cluster_labels, X_test_mnist_reduced, y_test_mnist)
    print("Classifying Test Data...CIFAR-10")
    cifar10_predicted_labels = classify_with_clusters(X_train_cifar10_reduced, cifar10_cluster_labels, X_test_cifar10_reduced, y_test_cifar10)

if __name__ == "__main__":
  main()